// File automatically generated by swift-bridge.
#include <stdint.h>
#include <stdbool.h>
typedef struct Error Error;
void __swift_bridge__$Error$_free(void* self);

void* __swift_bridge__$Vec_Error$new(void);
void __swift_bridge__$Vec_Error$drop(void* vec_ptr);
void __swift_bridge__$Vec_Error$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Error$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Error$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Error$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Error$len(void* vec_ptr);
void* __swift_bridge__$Vec_Error$as_ptr(void* vec_ptr);

typedef struct _Version _Version;
void __swift_bridge__$_Version$_free(void* self);

void* __swift_bridge__$Vec__Version$new(void);
void __swift_bridge__$Vec__Version$drop(void* vec_ptr);
void __swift_bridge__$Vec__Version$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec__Version$pop(void* vec_ptr);
void* __swift_bridge__$Vec__Version$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec__Version$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec__Version$len(void* vec_ptr);
void* __swift_bridge__$Vec__Version$as_ptr(void* vec_ptr);

typedef struct _VersionResult _VersionResult;
void __swift_bridge__$_VersionResult$_free(void* self);

void* __swift_bridge__$Vec__VersionResult$new(void);
void __swift_bridge__$Vec__VersionResult$drop(void* vec_ptr);
void __swift_bridge__$Vec__VersionResult$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec__VersionResult$pop(void* vec_ptr);
void* __swift_bridge__$Vec__VersionResult$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec__VersionResult$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec__VersionResult$len(void* vec_ptr);
void* __swift_bridge__$Vec__VersionResult$as_ptr(void* vec_ptr);

typedef struct _PrereleaseResult _PrereleaseResult;
void __swift_bridge__$_PrereleaseResult$_free(void* self);

void* __swift_bridge__$Vec__PrereleaseResult$new(void);
void __swift_bridge__$Vec__PrereleaseResult$drop(void* vec_ptr);
void __swift_bridge__$Vec__PrereleaseResult$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec__PrereleaseResult$pop(void* vec_ptr);
void* __swift_bridge__$Vec__PrereleaseResult$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec__PrereleaseResult$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec__PrereleaseResult$len(void* vec_ptr);
void* __swift_bridge__$Vec__PrereleaseResult$as_ptr(void* vec_ptr);

typedef struct Prerelease Prerelease;
void __swift_bridge__$Prerelease$_free(void* self);

void* __swift_bridge__$Vec_Prerelease$new(void);
void __swift_bridge__$Vec_Prerelease$drop(void* vec_ptr);
void __swift_bridge__$Vec_Prerelease$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Prerelease$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Prerelease$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Prerelease$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Prerelease$len(void* vec_ptr);
void* __swift_bridge__$Vec_Prerelease$as_ptr(void* vec_ptr);

typedef struct BuildMetadata BuildMetadata;
void __swift_bridge__$BuildMetadata$_free(void* self);

void* __swift_bridge__$Vec_BuildMetadata$new(void);
void __swift_bridge__$Vec_BuildMetadata$drop(void* vec_ptr);
void __swift_bridge__$Vec_BuildMetadata$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_BuildMetadata$pop(void* vec_ptr);
void* __swift_bridge__$Vec_BuildMetadata$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_BuildMetadata$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_BuildMetadata$len(void* vec_ptr);
void* __swift_bridge__$Vec_BuildMetadata$as_ptr(void* vec_ptr);

typedef enum __swift_bridge__$OperatorTag { __swift_bridge__$Operator$Exact, __swift_bridge__$Operator$Greater, __swift_bridge__$Operator$GreaterEq, __swift_bridge__$Operator$Less, __swift_bridge__$Operator$LessEq, __swift_bridge__$Operator$Tilde, __swift_bridge__$Operator$Caret, __swift_bridge__$Operator$Wildcard, } __swift_bridge__$OperatorTag;
typedef struct __swift_bridge__$Operator { __swift_bridge__$OperatorTag tag; } __swift_bridge__$Operator;
typedef struct __swift_bridge__$Option$Operator { bool is_some; __swift_bridge__$Operator val; } __swift_bridge__$Option$Operator;
typedef struct VersionReq VersionReq;
void __swift_bridge__$VersionReq$_free(void* self);

void* __swift_bridge__$Vec_VersionReq$new(void);
void __swift_bridge__$Vec_VersionReq$drop(void* vec_ptr);
void __swift_bridge__$Vec_VersionReq$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_VersionReq$pop(void* vec_ptr);
void* __swift_bridge__$Vec_VersionReq$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_VersionReq$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_VersionReq$len(void* vec_ptr);
void* __swift_bridge__$Vec_VersionReq$as_ptr(void* vec_ptr);

typedef struct _VersionReqResult _VersionReqResult;
void __swift_bridge__$_VersionReqResult$_free(void* self);

void* __swift_bridge__$Vec__VersionReqResult$new(void);
void __swift_bridge__$Vec__VersionReqResult$drop(void* vec_ptr);
void __swift_bridge__$Vec__VersionReqResult$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec__VersionReqResult$pop(void* vec_ptr);
void* __swift_bridge__$Vec__VersionReqResult$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec__VersionReqResult$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec__VersionReqResult$len(void* vec_ptr);
void* __swift_bridge__$Vec__VersionReqResult$as_ptr(void* vec_ptr);

void* __swift_bridge__$Error$to_string(void* self);
bool __swift_bridge__$_VersionResult$is_err(void* self);
bool __swift_bridge__$_VersionResult$is_ok(void* self);
void* __swift_bridge__$_VersionResult$get_version(void* self);
struct RustStr __swift_bridge__$_VersionResult$get_error_unsafe(void* self);
void* __swift_bridge__$_Version$new_version(uint64_t major, uint64_t minor, uint64_t patch, void* pre, void* build);
uint64_t __swift_bridge__$_Version$get_major(void* self);
uint64_t __swift_bridge__$_Version$get_minor(void* self);
uint64_t __swift_bridge__$_Version$get_patch(void* self);
void* __swift_bridge__$_Version$get_pre(void* self);
void* __swift_bridge__$_Version$get_build(void* self);
void __swift_bridge__$_Version$set_major(void* self, uint64_t new_val);
void __swift_bridge__$_Version$set_minor(void* self, uint64_t new_val);
void __swift_bridge__$_Version$set_patch(void* self, uint64_t new_val);
void __swift_bridge__$_Version$set_pre(void* self, void* new_val);
void __swift_bridge__$_Version$set_build(void* self, void* new_val);
bool __swift_bridge__$_Version$eq(void* self, void* other);
bool __swift_bridge__$_Version$less_than(void* self, void* other);
void* __swift_bridge__$_Version$to_string(void* self);
void* __swift_bridge__$_Version$parse(struct RustStr text);
struct RustStr __swift_bridge__$Prerelease$as_str(void* self);
bool __swift_bridge__$Prerelease$is_empty(void* self);
uintptr_t __swift_bridge__$Prerelease$len(void* self);
bool __swift_bridge__$Prerelease$is_char_boundary(void* self, uintptr_t index);
bool __swift_bridge__$Prerelease$eq(void* self, void* other);
bool __swift_bridge__$Prerelease$lt(void* self, void* other);
void* __swift_bridge__$new_prerelease(struct RustStr text);
bool __swift_bridge__$_PrereleaseResult$is_err(void* self);
bool __swift_bridge__$_PrereleaseResult$is_ok(void* self);
void* __swift_bridge__$_PrereleaseResult$unwrap_unchecked(void* self);
void* __swift_bridge__$_PrereleaseResult$unwrap_unchecked_owned(void* self);
void* __swift_bridge__$_PrereleaseResult$unwrap_err_unchecked_to_string(void* self);
void* __swift_bridge__$empty_prerelease(void);
bool __swift_bridge__$version_req_matches(void* version_req, void* version);
void* __swift_bridge__$version_req_star(void);
void* __swift_bridge__$parse_version_req(struct RustStr text);
bool __swift_bridge__$version_req_eq(void* lhs, void* rhs);
void* __swift_bridge__$version_req_to_string(void* req);
void* __swift_bridge__$version_req_mut_to_owned(void* refer);
void* __swift_bridge__$_VersionReqResult$get_version(void* self);
struct RustStr __swift_bridge__$_VersionReqResult$get_error_unsafe(void* self);
bool __swift_bridge__$_VersionReqResult$is_err(void* self);


